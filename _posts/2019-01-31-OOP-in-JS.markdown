---
layout: post
title:  "OOP in JavaScript"
date:   2019-01-31 19:55:16 +0800
categories: JavaScript
---


# Prototype

{% highlight javascript %}
function Car(options) {
  this.title = options.title;
}

Car.prototype.drive = function() {
  return 'vroom';
}

const car = new Car({ title: 'Focus' });

console.log(car.drive());
console.log(car);
{% endhighlight %}



# Prototypal Inheritance
{% highlight javascript %}
function Car(options) {
  this.title = options.title;
}

Car.prototype.drive = function() {
  return 'vroom';
}

function Toyota(options) {
  Car.call(this, options);
  this.color = options.color;
}

Toyota.prototype = Object.create(Car.prototype);
Toyota.prototype.constructor = Toyota;

Toyota.prototype.honk = function() {
  return 'beep';
}

const toyota = new Toyota({color: 'red', title: 'Daily Driver' });

console.log(toyota);
console.log(toyota.drive());
console.log(toyota.honk());
{% endhighlight %}


# Class
{% highlight javascript %}
class Car {
  constructor({title}) {
    this.title = title;
  }

  drive() {
    return 'vroom';
  }
}

const car = new Car({ title: 'Toyota' });
console.log(car);
console.log(car.drive());
{% endhighlight %}


# Extending Behavior of Class
{% highlight javascript %}
class Car {
  constructor({title}) {
    this.title = title;
  }

  drive() {
    return 'vroom';
  }
}

class Toyota extends Car {
  constructor(options) {
    super(options);
    this.color = options.color;
  }

  honk() {
    return 'beep';
  }
}

const toyota = new Toyota({ color: 'red', title: 'Daily Driver' });

console.log(toyota);
console.log(toyota.honk());
console.log(toyota.drive());
{% endhighlight %}





